package com.bio.database;

import com.bio.entity.Feed;
import com.bio.entity.Solution;
import com.bio.value.FeedValue;

import java.sql.*;

public class FeedDatabase {

    public static String createTable = "CREATE TABLE IF NOT EXISTS feed (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, solution BIGINT, apply TEXT, organism BIGINT, purpose TEXT)";
    public static String[] setIdSeq = {"ALTER TABLE feed ALTER COLUMN id RESTART WITH ", "SELECT max(id) FROM feed"};
    public static String insert = "INSERT INTO feed (solution, apply, organism, purpose) VALUES (?, ?, ?, ?)";
    public static String select = "SELECT id, solution, apply, organism, purpose FROM feed ORDER BY id";
    public static String selectById = "SELECT id, solution, apply, organism, purpose FROM feed WHERE id = ?";
    public static String selectByName = "SELECT a.id, a.solution, a.apply, a.organism, a.purpose FROM feed as a INNER JOIN solution as b on (a.solution = b.id) and (b.name = ?)";
    public static String deleteById = "DELETE FROM feed WHERE id = ?";

    public static long standardId = 1000;

    public static void init(Statement statement) throws SQLException {
        statement.execute(createTable);
        // id
        ResultSet rs = statement.executeQuery(setIdSeq[1]);
        rs.next();
        long max = rs.getLong(1);
        max = Math.max(max, standardId);
        statement.execute(setIdSeq[0] + (max + 1));
    }

    public static Feed insert(Connection connection, FeedValue feedValue, Long solutionId) throws SQLException {
        try (PreparedStatement stmtInsert = connection.prepareStatement(insert, Statement.RETURN_GENERATED_KEYS);
             PreparedStatement stmtSelect = connection.prepareStatement(selectById)) {
            prepareInsert(stmtInsert, feedValue, solutionId);
            stmtInsert.executeUpdate();
            ResultSet rs = stmtInsert.getGeneratedKeys();
            rs.next();
            Long id = rs.getLong(1);
            prepareSelectById(stmtSelect, id);
            rs = stmtSelect.executeQuery();
            rs.next();
            return get(rs);
        }
    }

    public static void prepareInsert(PreparedStatement statement, FeedValue feedValue, Long solutionId) throws SQLException {
        statement.setLong(1, solutionId);
        statement.setString(2, feedValue.getApply());
        statement.setObject(3, feedValue.getOrganism());
        statement.setString(4, feedValue.getPurpose());
    }

    public static Feed get(ResultSet rs) throws SQLException {
        Feed feed = new Feed();
        feed.setId(rs.getLong(1));
        Solution solution = new Solution();
        solution.setId(rs.getLong(2));
        feed.setSolution(solution);
        feed.setApply(rs.getString(3));
        feed.setOrganism(rs.getLong(4));
        feed.setPurpose(rs.getString(5));
        return feed;
    }

    public static void prepareSelectById(PreparedStatement statement, Long id) throws SQLException {
        statement.setLong(1, id);
    }

    public static void prepareSelectByName(PreparedStatement statement, String name) throws SQLException {
        statement.setString(1, name);
    }

    public static void prepareDeleteById(PreparedStatement statement, Long id) throws SQLException {
        statement.setLong(1, id);
    }

}
