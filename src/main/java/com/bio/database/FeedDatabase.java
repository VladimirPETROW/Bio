package com.bio.database;

import com.bio.entity.Feed;
import com.bio.value.FeedValue;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class FeedDatabase {

    public static String createTable = "CREATE TABLE IF NOT EXISTS feed (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, solution BIGINT, apply TEXT, organism BIGINT, purpose TEXT)";
    public static String setIdSeq = "SELECT setval('feed_id_seq', (SELECT max(id) FROM feed))";
    public static String insert = "INSERT INTO feed (solution, apply, organism, purpose) VALUES (?, ?, ?, ?) RETURNING id";
    public static String select = "SELECT id, solution, apply, organism, purpose FROM feed ORDER BY id";
    public static String selectById = "SELECT id, solution, apply, organism, purpose FROM feed WHERE id = ?";
    public static String deleteById = "DELETE FROM feed WHERE id = ?";

    public static void init(Statement statement) throws SQLException {
        statement.execute(createTable);
        statement.execute(setIdSeq);
    }

    public static void prepareInsert(PreparedStatement statement, FeedValue feedValue) throws SQLException {
        statement.setLong(1, feedValue.getSolution());
        statement.setString(2, feedValue.getApply());
        statement.setLong(3, feedValue.getOrganism());
        statement.setString(4, feedValue.getPurpose());
    }

    public static Feed get(ResultSet rs) throws SQLException {
        Feed feed = new Feed();
        feed.setId(rs.getLong(1));
        feed.setSolution(rs.getLong(2));
        feed.setApply(rs.getString(3));
        feed.setOrganism(rs.getLong(4));
        feed.setPurpose(rs.getString(5));
        return feed;
    }

    public static void prepareSelectById(PreparedStatement statement, Long id) throws SQLException {
        statement.setLong(1, id);
    }

    public static void prepareDeleteById(PreparedStatement statement, Long id) throws SQLException {
        statement.setLong(1, id);
    }

}
